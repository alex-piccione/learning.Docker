# NGINX API example 
name: Create API-service test Docker image
on: push

env:  
  IMAGE: test-api-service
  VERSION: 2.2.${{github.run_number}}
  SRC_PATH: examples/nginx api devops/api service

jobs:
  create_image:
    name: Create Docker image for Nginx API service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Build Docker image
        run: |
          cd "$SRC_PATH"
          docker image build -t $IMAGE .
          echo save image.tar
          docker save $IMAGE > ../../image.tar
          docker save $IMAGE > ../image.tar
          docker save $IMAGE > image.tar
          echo ls ../../
          ls ../../

      - name: Create artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifact
          path: image.tar
          if-no-files-found: error

      #- name: Publish on DockerHub
      #  env:
      #    REPO: ${{secrets.DOCKERHUB_USERID}}
      #  run: |
      #    echo "### DockerHub login and Push image \"$IMAGE:$VERSION\" "
      #    #echo ${{secrets.DOCKERHUB_PWD}} | docker login -u ${{secrets.DOCKERHUB_USERID}} $DOCKERHUB_URL --password-stdin   
      #    echo ${{secrets.DOCKERHUB_PWD}} | docker login -u ${{secrets.DOCKERHUB_USERID}} --password-stdin           
      #    docker image tag $IMAGE $REPO/$IMAGE:$VERSION
      #    docker image tag $IMAGE $REPO/$IMAGE:latest
      #    docker image push $REPO/$IMAGE:$VERSION 
      #    docker image push $REPO/$IMAGE:latest
      #    echo ---

      #- name: Publish on AWS ECR
      #  env:
      #    AWS_ACCESS_KEY_ID: ${{secrets.AWS_DEVOP_ACCESS_KEY}}
      #    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_DEVOP_ACCESS_SECRET}}
      #    AWS_REGION: eu-central-1
      #    REPO: ${{secrets.AWS_ECR_URL}}
      #  run: |
      #    echo "### Push image on AWS ECR"
      #    # login using environment variables: 
      #    password=$(aws ecr get-login-password)
      #    echo $password | docker login -u AWS $REPO --password-stdin
      #    docker tag $IMAGE $REPO/$IMAGE:$VERSION
      #    docker tag $IMAGE $REPO/$IMAGE:latest
      #    docker push $REPO/$IMAGE:$VERSION          
      #    docker push $REPO/$IMAGE:latest 
      #    echo ---
  
  publish_dockerhub:
    name: Publish image on DockerHub
    needs: create_image
    runs-on: ubuntu-latest
    steps: 
      - name: Get immage artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker image
        uses: docker/load-image-action@v3
        with:
          file: docker-artifact/image.tar
      - name: Publish on DockerHub
        env:
          REPO: ${{secrets.DOCKERHUB_USERID}}
        run: |
          echo "### DockerHub login and Push image \"$IMAGE:$VERSION\" "
          #echo ${{secrets.DOCKERHUB_PWD}} | docker login -u ${{secrets.DOCKERHUB_USERID}} $DOCKERHUB_URL --password-stdin   
          echo ${{secrets.DOCKERHUB_PWD}} | docker login -u ${{secrets.DOCKERHUB_USERID}} --password-stdin           
          docker image tag $IMAGE $REPO/$IMAGE:$VERSION
          docker image tag $IMAGE $REPO/$IMAGE:latest
          docker image push $REPO/$IMAGE:$VERSION 
          docker image push $REPO/$IMAGE:latest
          echo ---      
        
  publish_ECR:
    name: Publish image on AWS ECR
    needs: create_image
    runs-on: ubuntu-latest
    steps: 
      - name: Get immage artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker image
        uses: docker/load-image-action@v3
        with:
          file: docker-artifact/image.tar
      - name: Publish on AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_DEVOP_ACCESS_KEY}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_DEVOP_ACCESS_SECRET}}
          AWS_REGION: eu-central-1
          REPO: ${{secrets.AWS_ECR_URL}}
        run: |
          echo "### Push image on AWS ECR"
          # login using environment variables: 
          password=$(aws ecr get-login-password)
          echo $password | docker login -u AWS $REPO --password-stdin
          docker tag $IMAGE $REPO/$IMAGE:$VERSION
          docker tag $IMAGE $REPO/$IMAGE:latest
          docker push $REPO/$IMAGE:$VERSION          
          docker push $REPO/$IMAGE:latest 
          echo ---